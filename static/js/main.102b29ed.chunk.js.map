{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constant.js","containers/App.js","action.js","reducers.js","registerServiceWorker.js","index.js"],"names":["Card","username","name","email","id","className","alt","src","CardList","robots","length","map","robot","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","connect","searchField","searchRobots","requestRobots","isPending","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","fetch","then","res","json","data","catch","useEffect","filteredSearchfields","filter","toLowerCase","includes","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.102b29ed.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ username, name, email, id}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt={username} src={`https://robohash.org/${id}?size=200x200`} />\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    if(!robots.length) {\r\n        return <h1 className='pa5'>no robot found</h1>\r\n    } else {\r\n        return (\r\n            <div>\r\n                {robots.map(robot => \r\n                    <Card \r\n                        key={robot.id} \r\n                        id={robot.id} \r\n                        name={robot.name} \r\n                        email={robot.email} \r\n                        username={robot.username} \r\n                    />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                aria-label='Search Robots'\r\n                className='pa3 ba b--green bg-lightest-blue' \r\n                type='search' \r\n                placeholder='search robots' \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '5px solid #333', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError : true });\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1 className='pa5'>oops... there some problem.</h1>\r\n        } else {\r\n            return this.props.children;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING  = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS  = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { useEffect } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport { setSearchfield, requestRobots } from '../action'; \n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots : state.requestRobots.robots,\n    isPending : state.requestRobots.isPending,\n    error : state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchfield(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nconst App = (props) => {\n\n  useEffect(() => {\n    props.onRequestRobots();\n  },[]);\n\n  const { searchField, onSearchChange, robots, isPending } = props;\n  const filteredSearchfields = robots.filter(robot => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n    \n  return isPending ?\n    (<div className='tc pa5'> <h1>loading...</h1></div>)\n    : \n      (<div className='tc'>\n        <h1 className='f1' >robofriends</h1>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll >\n          <ErrorBoundary>\n            <CardList robots={filteredSearchfields}/>\n          </ErrorBoundary>\n        </Scroll>\n      </div>)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_FAILED  \r\n} from './constant.js';\r\n\r\nexport const setSearchfield = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type : REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(res => res.json())\r\n      .then(data => dispatch({ type : REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n      .catch(error => dispatch({ type : REQUEST_ROBOTS_FAILED, payload : error }))\r\n};","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_FAILED  \r\n} from './constant.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField : ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD :\r\n            return Object.assign({}, state, { searchField : action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending : false,\r\n    robots : [],\r\n    error : ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING :\r\n            return Object.assign({}, state, { isPending : true });\r\n        case REQUEST_ROBOTS_SUCCESS :\r\n            return Object.assign({}, state, { robots : action.payload, isPending: false });\r\n        case REQUEST_ROBOTS_FAILED :\r\n            return Object.assign({}, state, { robots : action.payload, isPending: false})\r\n        default:\r\n            return state;\r\n    }\r\n}","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers.js';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\nimport './index.css';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store} >\n        <App />\n    </Provider>,document.getElementById('root'));\nregisterServiceWorker(); \n\n"],"sourceRoot":""}